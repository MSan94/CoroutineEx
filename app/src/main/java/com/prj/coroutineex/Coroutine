# 코루틴
- 스레드를 경량화 한 새로운 도구
- 동시성 프로그래밍 개념을 도입한 것
- 코루틴에서 스레드는 단지 코루틴이 실행되는 공간을 제공하는 역할이며, 실행 중인 스레드를 중단시키지 않기때문에 하나의 스레드에 여러 코루틴 존재 가능

## 코루틴 버저닝
- 4.1버전에는 코루틴 내장
- CoroutineScope 입력시 자동 완정이 안되면 그래들 추가
- 버전 정보는 https://developer.android.com/kotlin/coroutines?hl=ko
```
implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9" //버전은 공부시 버전
```

## 코루틴 스코프
- 코루틴은 정해진 스코프 안에서 실행되는데 이것을 코루틴 스코프라 한다.
- GlobalScope.launch
```
GlobalScope.launch{
    // 코루틴 실행 코드
}
```
- 글로벌 스코프 : 앱의 생명주기와 함게 동작하므로 앱이 실행되는 동안은 별도의 생명 주기 관리가 필요 없다
- 코루틴 스코프 : 버튼을 클릭해서 서버의 정보를 가져오거나 파일을 여는 용도라면 필요할 때만 열고 완료되면 닫는 CoroutineScope를 사용
```
binding.btnDownload.setOnClickListener{
    CoroutineScope(Dispatchers.IO).launch{
        // 처리 코드
    }
}
```
- 코루틴 스코프에는 Dispatchers.IO 라는 상수값이 있는데, 이것을 디스패처라고 하며 코루틴이 실행될 스레드를 지정하는 것

## 디스패처 종류
- Dispatchers.Default = CPU를 많이 먹는 작업을 백그라운드 스레드에서 실행하도록 최적화 되어 있음
- Dispatchers.IO = 이미지 다운, 파일 입출력 등의 입출력에 최적화
- Dispatchers.Main = 기본 스레드에서 코루틴을 실행하고 UI와 상호작용에 최적화 되어있는 디스패처, 텍스트뷰에 글자 입력할 경우 사용
- Dispatchers.Unconfined = 자신을 호출한 컨텍스트를 기본으로 사용하며, 중단 후 다시 실행하는 시점에 컨텍스트가 바뀌면 자신의 컨텍스트도 다시 실행하는 컨텍스트를 따라감

## launch와 상태 관리
- 코루틴은 launch와 async로 시작 가능
- launch는 상태를 관리할 수 있고, async는 상태를 관리하고 연산 결과까지 반환 받을 수 있다.
- launch는 호출하는 것만으로 코루틴을 생성할 수 있고, 반환되는 job을 변수에 저장해두고 상태 관리용으로 사용할 수 있다.

- cancel : 코루틴의 동작을 멈추는 상태 관리 메서드, 하나의 스코프안에 여러 코루틴이 있으면 하위 코루틴도 모두 멈춘다.
```
val job = CoroutineScope(Dispatchers.Default).launch{
    val job1 = launch{
        ....
    }
}
job.cancel()
```

- join : 각각의 코루틴이 순차적으로 실행
```
CoroutineScope(Dispatchers.Default).launch(){
    launch {
        ....
    }.join()

    launch {
        ...
    }
}
```

## async와 반환값 처리
- 코루틴 스코프의 연산 결과를 받아서 사용가능하다.
- 예를 들어, 오래 걸리는 2개의 코루틴을 async로 선언하고, 결과값을 처리하는 곳에서 await 함수를 사용하면 결과 처리가 완료된 후에 await를 호출한 줄의 코드 실행
```
CoroutineScope(Dispatchers.Default).async{
    val deferred1 = async {
        delay(500)
        350
    }
    val deferred2 = async {
        delay(1000)
        200
    }
    Log.d("코루틴", "연산결과 = ${deffered1.await() + deffered2.await()}")
}
```

## suspend
- 코루틴 안에서 suspend 키워드로 선언된 함수가 호출되면 이전가지의 코드 실행이 멈추고, suspend 함수의 처리가 완료된 후 멈춰있던 스코프의 다음 코드 실행
```
suspend fun subRoutine(){
    ...
}
CoroutineScope(Dispatcher.Main).launch{
    // 코드 1
    subRoutine()
    // 코드 2
}
```
- 코드1 실행 후 subRoutine() 호출
- subRoutine() 완료 후 코드2 호출
- subRoutine()은 suspend 키워드로 인해 CoroutineScope 안에서 자동으로 백그라운드 스레드처럼 동작
- ** subRoutine()이 실행되며 호출한 측의 코드를 잠시 멈췄지만 스레드의 중단은 없다!!!!
- 코루틴에서 부모 루틴의 상태 값을 저장 후 subRoutine()을 실행하고, 다시 subRoutine()이 종료된 후 부모 루틴의 값을 복원하여 스레드에 영향을 주지 않는다.

## withContext로 디스패처 분리
- suspend 함수를 코루틴 스코프에서 호출할 때 호출한 스코프와 다른 디스패처를 사용할 때가 있다.
- ex) 호출 측 코루틴은 Main 디스패처에서 UI제어를 하는데, 호출되는 suspend 함수는 디스크에서 파일을 읽는다.
- 이럴경우 withContext를 사용하여 호출되는 suspend 함수의 디스패처를 IO로 변경가능
- 호출되는 SUSPEND 함수에 반환값이 있다면 변수에 저장하고 사용 가능
```
suspend fun readFile() : String {
    reutnr "파일 내용"
}
CoroutineScope(Dispatchers.Main).launch{
    // 화면 처리
    val result = withContext(Dispatchers.IO){
        readFile()
    }
    Log.d("코루틴","파일 경과 = $result")
}
```